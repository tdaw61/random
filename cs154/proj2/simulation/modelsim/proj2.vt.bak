// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/12/2011 23:34:18"
                                                                                
// Verilog Test Bench template for design : proj2
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module proj2_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg reset;
// wires                                               
wire [7:0] A_out;
wire [7:0] aluout;
wire alusrc;
wire [4:0] aout;
wire [7:0] B_out;
wire [4:0] borc;
wire [4:0] bout;
wire bsel;
wire EN_C;
wire [5:0] hazardop;
wire fwRs;
wire fwRt;
wire [31:0] instr;
wire jrsel;
wire jsel;
wire [7:0] data11;
wire [7:0] data22;
wire diff;
wire memtoreg;
wire [5:0] op;
wire [5:0] op2;
wire [7:0] pcplus4;
wire [4:0] rd1;
wire regwr;
wire [7:0] result;
wire [7:0] result2;
wire [7:0] resultFromMem;
wire [4:0] rs2;
wire [4:0] rt1;
wire [4:0] rt2;
wire [7:0] truncate;
wire wren;

// assign statements (if any)                          
proj2 i1 (
// port map - connection between master ports and signals/registers   
	.A_out(A_out),
	.aluout(aluout),
	.hazardop(hazardop),
	.alusrc(alusrc),
	.aout(aout),
	.B_out(B_out),
	.borc(borc),
	.data11(data11),
	.data22(data22),
	.diff(diff),
	.bout(bout),
	.bsel(bsel),
	.clock(clock),
	.EN_C(EN_C),
	.fwRs(fwRs),
	.fwRt(fwRt),
	.instr(instr),
	.jrsel(jrsel),
	.jsel(jsel),
	.memtoreg(memtoreg),
	.op(op),
	.op2(op2),
	.pcplus4(pcplus4),
	.rd1(rd1),
	.regwr(regwr),
	.reset(reset),
	.result(result),
	.result2(result2),
	.resultFromMem(resultFromMem),
	.rs2(rs2),
	.rt1(rt1),
	.rt2(rt2),
	.truncate(truncate),
	.wren(wren)
);initial                                                
begin                                                  
clock=0;
reset=1;
#30000 reset=0;

$display("Running testbench");                       
end                                                    
always                                                             
begin
#30000 clock=~clock;   
end
endmodule