%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <iostream>
	#define YYDEBUG 1

	int yylex(void);
	void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose


%start ROOT

%token COMMENT;
%token EQ;
%token DEQ;
%token NE;
%token LT;
%token LE;
%token GT;
%token GE;
%token PLUS;
%token MINUS;
%token DIVIDE;
%token AND;
%token OR;
%token NOT;
%token SEMI;
%token COMMA;
%token ABS;
%token OFUNC;
%token CFUNC;
%token OPAREN;
%token CPAREN;
%token OARRAY;
%token CARRAY;
%token BOOLEAN;
%token IF;
%token ELSE;
%token WHILE;
%token FOR;
%token FUNCTION;
%token INTARRAY;
%token RETURN;
%token TRUE;
%token FALSE;
%token INT;
%token DECIMAL;
%token HEX;
%token OCT;
%token BIN;
%token ZERO;
%token VAR;
%token MULT;
%token LITERAL;
%token END;
%token NUM;
%token IDENT;
%token COLON;

%left OR
%left AND
%nonassoc LT GT GE LE 
%right EQ DEQ NE
%left PLUS MINUS
%left MULT DIVIDE
 
/* WRITE ME: put all your token definitions here*/
/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/

%%

/* WRITE ME: This is the language from Project 1. You need
			 to put the productions for the grammar for the
			 language for this project here*/
			 
ROOT:
	| ROOT Program
	{
		printf("success");
		exit(0);
	}
	;

Program : Functions
	;

Functions: 
	| Functions Function
	;

Function: FUNCTION LITERAL OPAREN Parameterlist CPAREN COLON Returntype OFUNC bodyoffunction CFUNC
	{
		//printf("got to function");
	}
	;

Returntype:
	BOOLEAN
	| INT
	;

Parameterlist:
	| List Returntype More 
	;

More	:
	SEMI Parameterlist
	|
	;

List   : LITERAL List
	| COMMA List
	| COLON
	;

bodyoffunction : variabledec Functions Statements ReturnStatement
	;

ReturnStatement
	: RETURN expression SEMI
	;

variabledec :
	| VAR List Type SEMI variabledec
	;

Type	:
	  INT
	| BOOLEAN
	| INTARRAY OARRAY NUM CARRAY
	;

Statements:
	| Statement Statements
	;

Statement :
	LITERAL assignment | if | for | while

if
	: IF OPAREN  expression CPAREN OFUNC bodyofnested  CFUNC else
	;

else 	:
	| ELSE OFUNC bodyofnested CFUNC
	;

for
	: FOR OPAREN posstate OPAREN expression CPAREN posstate CPAREN OFUNC bodyofnested CFUNC
	;

posstate :
	| Statement
	;

bodyofnested :
	| Statement bodyofnested
	;

while  : WHILE OPAREN expression CPAREN OFUNC bodyofnested CFUNC
	;

assignment
	: EQ expression SEMI
	| OARRAY expression CARRAY EQ expression SEMI
	;


expression
	: expression PLUS expression
	{
		$$ = $1 + $3;
	}	
	| expression ABS ABS expression
	| expression AND expression
	| expression GT expression
	| expression GE expression
	| expression LT expression
	| expression LE expression
	| expression NE expression
	| expression DEQ expression
	| expression MINUS expression 
	{
		$$ = $1 - $3;
	}
	| expression DIVIDE expression 
	{
		$$ = $1 / $3;
	}
	| expression MULT expression 
	{
		$$ = $1 * $3;
	}
	| OPAREN expression CPAREN 
	| DECIMAL
	{ 
		$$ = $1; 
	}
	| Neg
	| TRUE 
	| FALSE 
	| NOT expression 
	| ABS expression ABS 
	;

Neg	: Term
	| MINUS Term %prec MULT
	;

Term	: HEX
	| OCT
	| BIN
	| NUM
	| ZERO 
	| LITERAL dec
	;

dec	: OARRAY expression CARRAY
	| OPAREN functioncall CPAREN
	|
	;

functioncall
	: 
	| expression functioncall
	| COMMA functioncall
	;



%%

/*You shouldn't have to do anything past this*/

extern int yylineno;

void yyerror(const char *s) {
	fprintf(stderr, "%s at line %d\n", s, yylineno);
	exit(0);
}
