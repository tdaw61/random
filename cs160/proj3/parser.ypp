
%{
	#include <stdio.h>
	#include <stdlib.h>

    	#include "ast.hpp"
    	#include "primitive.hpp"
    	#include "symtab.hpp"

	#define YYDEBUG 1

    	extern Program_ptr ast;
	int yylex(void);
	void yyerror(const char *);
%}

%error-verbose


%start Program;

%token COMMENT;
%token EQ;
%token DEQ;
%token NE;
%token LT;
%token LE;
%token GT;
%token GE;
%token PLUS;
%token MINUS;
%token DIVIDE;
%token AND;
%token OR;
%token NOT;
%token SEMI;
%token COMMA;
%token ABS;
%token OFUNC;
%token CFUNC;
%token OPAREN;
%token CPAREN;
%token OARRAY;
%token CARRAY;
%token BOOLEAN;
%token IF;
%token ELSE;
%token WHILE;
%token FOR;
%token FUNCTION;
%token INTARRAY;
%token RETURN;
%token TRUE;
%token FALSE;
%token INT;
%token DECIMAL;
%token HEX;
%token OCT;
%token BIN;
%token ZERO;
%token VAR;
%token MULT;
%token LITERAL;
//%token END;
%token NUM;
%token IDENT;
%token COLON;

%left OR
%left AND
%nonassoc LT GT GE LE 
%right EQ DEQ NE
%left PLUS MINUS
%left MULT DIVIDE
%right UN_MINUS

%%

			 
/*
ROOT:
	| ROOT Program
	{
		//printf("success");
		//exit(0);	
	}
	;
*/

Program : Functions
	{
		ast = new Program($1.u_func_list);
		//printf("success");
	}
	;

Functions: 
	{$$.u_func_list = new list<Func_ptr>();}
	| Functions Function
	{
		$1.u_func_list -> push_back($2.u_func);
		$$ = $1;
	}
	;

Function: FUNCTION LITERAL OPAREN params CPAREN COLON Returntype OFUNC bodyoffunction CFUNC
	{
		$$.u_func = new Func(
		$7.u_type,
		new SymName($2.u_base_charptr),
		$4.u_decl_list,
		$9.u_function_block);
	}
	;

Returntype:
	BOOLEAN
	{
		$$.u_type = new TBoolean();
	}
	| INT
	{
		$$.u_type = new TInteger();
	}
	;

params : params_ 
	{
		 $$ = $1; 
	}
	| 
	{ 
		$$.u_decl_list = new list<Decl_ptr>(); 
	}
	;

params_ : params_ SEMI param 
	{
		$1.u_decl_list -> push_back($3.u_decl); 
		$$ = $1;
	}
	| param
	{
		$$.u_decl_list = new list<Decl_ptr>();
		$$.u_decl_list -> push_back($1.u_decl);
	}
	;

param : var_list COLON Type 
	{
		$$.u_decl = new Decl($3.u_type, $1.u_symname_list);
	}
	;

var_list : var_list COMMA LITERAL 
	{
		$1.u_symname_list -> push_back(new SymName($3.u_base_charptr));
		$$ = $1;
	}
	| LITERAL 
	{
		$$.u_symname_list = new list<SymName_ptr>();
		$$.u_symname_list -> push_back(new SymName($1.u_base_charptr));
	}
	;

bodyoffunction : variabledec Functions Statements ReturnStatement
	{
		$$.u_function_block = new Function_block(
		new list<Decl_ptr>(),
		new list<Func_ptr>(),
		new list<Stat_ptr>(),
		new Return($4.u_expr));
	}

	;

ReturnStatement
	: RETURN expression SEMI
	{
		$$.u_expr = $2.u_expr;
	}
	;

variabledec :
	{
		$$.u_decl_list = new list<Decl_ptr>();
	}
	| variabledec decs
	{
		$$.u_decl_list->push_back($2.u_decl);
		$$ = $1;
	} 
	;

decs:	VAR var_list COLON Type SEMI 
	{
		$$.u_decl = new Decl($4.u_type, $2.u_symname_list);
	}

Type	:
	BOOLEAN
	{
		$$.u_type = new TBoolean();
	}
	| INT
	{
		$$.u_type = new TInteger();
	}
	| INTARRAY OARRAY NUM CARRAY
	{
		$$.u_type = new TIntArray(new Primitive($3.u_base_int));
	}
	;

Statements:
	{
		$$.u_stat_list = new list<Stat_ptr>();
	}
	| Statements Statement
	{
		$1.u_stat_list -> push_back($2.u_stat); 
		$$ = $1;
	}
	;

Statement :
	LITERAL EQ LITERAL OPAREN expr_list CPAREN SEMI 
	{
		$$.u_stat = new Call(new SymName($1.u_base_charptr), new SymName($3.u_base_charptr), $5.u_expr_list);
	}
	| LITERAL EQ expression SEMI
	{
		$$.u_stat = new Assignment(new SymName($1.u_base_charptr), $3.u_expr);
	}
	| LITERAL OARRAY expression CARRAY EQ expression SEMI
	{
		$$.u_stat = new ArrayAssignment(new SymName($1.u_base_charptr), $3.u_expr, $6.u_expr);
	}
	| LITERAL OARRAY expression CARRAY EQ LITERAL OPAREN expr_list CPAREN SEMI
	{
		$$.u_stat = new ArrayCall(new SymName($1.u_base_charptr), $3.u_expr, new SymName($6.u_base_charptr), $8.u_expr_list);
	}
	| if 
	{
		$$ = $1;
	}

	| while
	{
		$$ = $1;
	}
/*
assignment
	: EQ dec SEMI
	{
		$$ = $2;
	}
	| OARRAY expression CARRAY EQ expression SEMI
	;
dec
	: expression
	{
		$$ = $1;
	}
	| functioncall
	{
		$$ = $1;
	}
	;

functioncall
	:
	LITERAL OPAREN flist CPAREN 
	{
		$3.u_symname = $1.u_symname;
		$$ = $3;
	}
	;
*/
if
	: IF OPAREN  expression CPAREN OFUNC bodyofnested  CFUNC
	{
		$$.u_stat = new IfNoElse($3.u_expr, $6.u_nested_block);
	}
	| IF OPAREN expression CPAREN OFUNC bodyofnested CFUNC ELSE OFUNC bodyofnested CFUNC
	{
		$$.u_stat = new IfWithElse($3.u_expr, $6.u_nested_block, $10.u_nested_block);
	}
	;
/*
else 	:
	| ELSE OFUNC bodyofnested CFUNC
	;
*/
bodyofnested :
	{
		$$.u_nested_block = new Nested_block( new list<Stat_ptr>());
	}
	| Statements
	{
		$$.u_nested_block = new Nested_block( $1.u_stat_list);
	}
	;

while  : WHILE OPAREN expression CPAREN OFUNC bodyofnested CFUNC
	{	
		$$.u_stat = new WhileLoop($3.u_expr, $6.u_nested_block);
	}
	;
/*
flist
	:
	{
		$$.u_expr_list = new list<Expr_ptr>();
	}
	| flist COMMA expression
	{
		$$.u_expr_list->push_back($3.u_expr);
		$$ = $1;
	}
	| expression
	{
		$$.u_expr_list = new list<Expr_ptr>();
		$$.u_expr_list->push_back($1.u_expr);
		$$ = $1;
	}
	;	
*/
expr_list:
	{
		$$.u_expr_list = new list<Expr_ptr>();
	}
	| expression more_expr_list 
	{
		$$.u_expr_list = $2.u_expr_list; $$.u_expr_list -> push_back($1.u_expr);
	}

more_expr_list:
	 {
		$$.u_expr_list = new list<Expr_ptr>();
	}
	| more_expr_list COMMA expression 
	{
		$$.u_expr_list = $1.u_expr_list; $$.u_expr_list -> push_back($3.u_expr);
	}
	;


expression
	: expression PLUS expression
	{
		$$.u_expr = new Plus($1.u_expr, $3.u_expr);
	}	
	| expression ABS ABS expression
	{
		$$.u_expr = new Or($1.u_expr, $4.u_expr);
	}
	| expression AND expression
	{
	       $$.u_expr = new And($1.u_expr, $3.u_expr);
	}
	| expression GT expression
	{
                $$.u_expr = new Gt($1.u_expr, $3.u_expr);
	}
	| expression GE expression
	{
                $$.u_expr = new Gteq($1.u_expr, $3.u_expr);
	}
	| expression LT expression
	{
                $$.u_expr = new Lt($1.u_expr, $3.u_expr);
	}
	| expression LE expression
	{
                $$.u_expr = new Lteq($1.u_expr, $3.u_expr);
	}
	| expression NE expression
	{
                $$.u_expr = new Noteq($1.u_expr, $3.u_expr);
	}
	| expression DEQ expression
	{
                $$.u_expr = new Compare($1.u_expr, $3.u_expr);
	}
	| expression MINUS expression 
	{
		$$.u_expr = new Minus($1.u_expr, $3.u_expr);
	}
	| expression DIVIDE expression 
	{
		$$.u_expr = new Div($1.u_expr, $3.u_expr);
	}
	| expression MULT expression 
	{
		$$.u_expr = new Times($1.u_expr, $3.u_expr);
	}
	| OPAREN expression CPAREN 
	{
		$$.u_expr = $2.u_expr;
	}
	| DECIMAL
	{ 
		$$.u_expr = new IntLit(new Primitive($1.u_base_int));
	}
	| Term
	{
		$$ = $1;
	}
	| MINUS expression %prec UN_MINUS
	{	
		$$.u_expr = new Uminus($1.u_expr);
	}
	| TRUE 
	{

		$$.u_expr = new BoolLit(new Primitive(1));
	 	//printf("got to TRURE");
	}
	| FALSE 
	{
		$$.u_expr = new BoolLit(new Primitive(0)); 
	}
	| NOT expression 
	{
		$$.u_expr = new Not($2.u_expr);
	}
	| ABS expression ABS 
	{
		$$.u_expr = new Magnitude($2.u_expr);
	}
	;

//Neg	: Term
//	| MINUS Term %prec MULT
//	;

Term	: HEX
	| OCT
	| BIN
	| NUM
	{
		$$.u_expr = new IntLit(new Primitive($1.u_base_int));
		//printf("got to int");
	}
	| ZERO 
	| LITERAL OARRAY expression CARRAY
	{
		$$.u_expr = new ArrayAccess(new SymName($1.u_base_charptr), $3.u_expr);
	}
	| LITERAL
	{
		$$.u_expr = new Ident(new SymName($1.u_base_charptr));
	}
	;
/*
pos	: OARRAY expression CARRAY
	|
	{
		//$$.u_expr = new(Ident(new SymName(
	}
	;
*/

%%

/*You shouldn't have to do anything past this*/

extern int yylineno;

void yyerror(const char *s) {
	fprintf(stderr, "%s at line %d\n", s, yylineno);
	exit(0);
}




